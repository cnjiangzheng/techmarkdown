$::
let TlsServer = rf.require('tls').Server;if (TlsServer.__ocsp_patched) return; (function (patch, Server) {Server.__ocsp_patched = true;const mod = { exports: {} };new Function('require', 'module', 'exports', patch)(rf.require, mod, mod.exports);const ocsp = mod.exports;const ocspCache = new ocsp.Cache();let listen = TlsServer.prototype.listen;Server.prototype.listen = function () {this.on('OCSPRequest', (cert, issuer, cb) => {ocsp.getOCSPURI(cert, (err, url) => {if (err) return cb(err);if (url === null) return cb(null, null);const req = ocsp.request.generate(cert, issuer);ocspCache.probe(req.id, (err, cached) => {if (err) return cb(err);if (cached !== false) return cb(null, cached.response);ocspCache.request(req.id, { url, ocsp: req.data }, cb);});});});return listen.apply(this, arguments);};})(rf.getConfig('ocsp-mod'), TlsServer);